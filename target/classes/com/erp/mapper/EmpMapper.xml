<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.erp.mapper.EmpMapper">
    <resultMap id="empVoMap" type="com.erp.vo.EmpVo">
        <id property="id" column="id"/>
        <result property="username" column="username"/>
        <result property="tel" column="tel"/>
        <result property="idCardNo" column="id_card_no"/>
        <result property="realName" column="real_name"/>
        <result property="gender" column="gender"/>
        <result property="email" column="email"/>
        <result property="address" column="address"/>
        <result property="birthDate" column="birth_date"/>
        <result property="deptName" column="dept_name"/>
        <result property="roleNames" column="role_names"/>
    </resultMap>

    <sql id="havingWheres">
        <if test="wheres.realName!=null and wheres.realName!=''">
            and e.real_name like '%${wheres.realName}%'
        </if>
        <if test="wheres.username!=null and wheres.username!=''">
            and e.username like '%${wheres.username}%'
        </if>
        <if test="wheres.deptName!=null and wheres.deptName!=''">
            and dept_name like '%${wheres.deptName}%'
        </if>
        <if test="wheres.roleNames!=null and wheres.roleNames!=''">
            and role_names like '%${wheres.roleNames}%'
        </if>
    </sql>
    <sql id="selectResult">
        select e.*,d.name dept_name,group_concat(r.name separator ',') role_names
        from emp e
        left join dept d on  e.dept_id=d.id
        left join emp_role er on e.id=er.emp_id
        left join role r on er.role_id=r.id
        group by e.id
    </sql>
    <!--List<EmpVo> page(@Param("wheres")EmpVo wheres)-->
    <select id="page" resultMap="empVoMap">
        <include refid="selectResult"/>
        having 1=1
        <include refid="havingWheres"/>
        order by e.id desc
        limit #{start},#{pageSize}
    </select>

    <select id="count" resultType="int">
        select count(r.id) from(
        <include refid="selectResult"/>
        having 1=1
        <include refid="havingWheres"/>
        ) r
    </select>
    <!--void add()-->
    <insert id="add">
        insert into emp (id,username,password,tel,id_card_no,real_name,
        gender,email,address,birth_date,dept_id)
        values
        (null,#{emp.username},#{emp.password},#{emp.tel},#{emp.idCardNo},#{emp.realName},
        #{emp.gender},#{emp.email},#{emp.address},#{emp.birthDate},#{emp.deptId});
    </insert>
    <!--EmpVo findById()-->
    <select id="findById" resultMap="empVoMap">
        <include refid="selectResult"/>
        having e.id=#{id}
    </select>

    <!--void update()-->
    <update id="update">
        update emp set
        real_name=#{emp.realName},birth_date=#{emp.birthDate},gender=#{emp.gender},tel=#{emp.tel},
        address=#{emp.address},id_card_no=#{emp.idCardNo},email=#{emp.email},dept_id=#{emp.deptId}
        where id=#{emp.id}
    </update>

    <!--void remove()-->
    <delete id="remove">
        delete from emp where id in
        <foreach collection="ids" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </delete>

    <!--int getKey()-->
    <select id="getKey" resultType="int">
        select LAST_INSERT_ID()
    </select>

    <!--login()-->
    <select id="login" resultType="com.erp.pojo.Emp">
        select
        emp.*,id_card_no idCardNo,real_name realName,birth_date birthDate
        from emp where username=#{username} and password=#{password}
    </select>
</mapper>